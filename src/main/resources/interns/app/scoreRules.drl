/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package interns.app;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import java.util.ArrayList;

import interns.model.Intern;
import interns.model.Placement;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "Ensure position is not overfilled"
    when
        Intern( $placement : placement, $name: name, placement != null )
        Intern( placement == $placement, name < $name)
        $internList : ArrayList( size > 1 ) from collect( Intern(placement == $placement))  
    then
        if ($internList.size() > $placement.getPositionsAvaliable()) {
            scoreHolder.addHardConstraintMatch(kcontext, -1);
        }
end

rule "Ensure intern has position"
    when
        $intern: Intern( placement == null )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "Intern placement preference"
    when
        $intern : Intern( placement != null )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $intern.getPlacementRanking());
end